syntax = "proto3";
package daomint.daomint;

import "daomint/daomint/voting.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "daomint/daomint/params.proto";
import "daomint/daomint/vote.proto";
// this line is used by starport scaffolding # 1

option go_package = "DAOmint/x/daomint/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/DAOmint/daomint/params";
  }
  // Queries a list of Votings items.
	rpc Votings(QueryVotingsRequest) returns (QueryVotingsResponse) {
		option (google.api.http).get = "/DAOmint/daomint/votings";
	}

// Queries a Vote by id.
	rpc Vote(QueryGetVoteRequest) returns (QueryGetVoteResponse) {
		option (google.api.http).get = "/DAOmint/daomint/vote/{id}";
	}

	// Queries a list of Vote items.
	rpc VoteAll(QueryAllVoteRequest) returns (QueryAllVoteResponse) {
		option (google.api.http).get = "/DAOmint/daomint/vote";
	}

// Queries a list of Votes items.
	rpc Votes(QueryVotesRequest) returns (QueryVotesResponse) {
		option (google.api.http).get = "/DAOmint/daomint/votes/{id}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryVotingsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryVotingsResponse {
  repeated Voting votings = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetVoteRequest {
	uint64 id = 1;
}

message QueryGetVoteResponse {
	Vote Vote = 1 [(gogoproto.nullable) = false];
}

message QueryAllVoteRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllVoteResponse {
	repeated Vote Vote = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryVotesRequest {
  uint64 id = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryVotesResponse {
  Voting Voting = 1;

  repeated Vote Vote = 2;

  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

// this line is used by starport scaffolding # 3
